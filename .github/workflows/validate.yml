name: PR Config Analyzer
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  analyze-configs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: pip install requests
    
    - name: Run PR analyzer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_URL: ${{ github.event.pull_request.html_url }}
      run: |
        python - <<'EOF'
        import os
        import re
        import requests
        from typing import Dict, List, Optional, Tuple

        def extract_repo_info(pr_url: str) -> Tuple[str, str, int]:
            pattern = r"github\.com/([^/]+)/([^/]+)/pull/(\d+)"
            match = re.search(pattern, pr_url)
            if not match:
                raise ValueError(f"Invalid GitHub PR URL format: {pr_url}")
            return match.group(1), match.group(2), int(match.group(3))

        def get_pr_details(owner: str, repo: str, pr_number: int) -> Dict:
            url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}"
            response = requests.get(
                url,
                headers={
                    "Accept": "application/vnd.github.v3+json",
                    "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"
                }
            )
            response.raise_for_status()
            return response.json()

        def get_pr_changed_files(owner: str, repo: str, pr_number: int) -> List[Dict[str, str]]:
            url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}/files"
            response = requests.get(
                url,
                headers={
                    "Accept": "application/vnd.github.v3+json",
                    "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"
                }
            )
            response.raise_for_status()
            return response.json()

        def get_file_content(owner: str, repo: str, ref: str, path: str) -> Optional[str]:
            url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}?ref={ref}"
            response = requests.get(
                url,
                headers={
                    "Accept": "application/vnd.github.v3.raw",
                    "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"
                }
            )
            if response.status_code == 404:
                return None
            response.raise_for_status()
            return response.text

        def main():
            pr_url = os.getenv('PR_URL')
            if not pr_url:
                raise ValueError("PR_URL environment variable not set")
            
            try:
                owner, repo, pr_number = extract_repo_info(pr_url)
                pr_details = get_pr_details(owner, repo, pr_number)
                
                # Safely get branch references
                base_ref = pr_details.get('base', {}).get('ref')
                head_ref = pr_details.get('head', {}).get('ref')
                
                if not base_ref or not head_ref:
                    raise ValueError("Could not determine branch references")
                
                print(f"Analyzing PR #{pr_number}: {head_ref} → {base_ref}")
                
                changed_files = get_pr_changed_files(owner, repo, pr_number)
                for file in changed_files:
                    filename = file['filename']
                    if not any(filename.endswith(ext) for ext in ('.json', '.yaml', '.yml', '.ini')):
                        continue
                    
                    print(f"\nAnalyzing {filename}:")
                    main_content = get_file_content(owner, repo, base_ref, filename)
                    pr_content = get_file_content(owner, repo, head_ref, filename)
                    
                    if main_content is None:
                        print("→ File added in PR branch")
                    elif pr_content is None:
                        print("→ File removed in PR branch")
                    else:
                        print("→ File modified")
                        # Add your custom comparison logic here

            except Exception as e:
                print(f"Error: {str(e)}")
                raise

        if __name__ == "__main__":
            main()
        EOF