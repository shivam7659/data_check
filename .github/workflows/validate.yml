name: PR Config Analyzer
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  analyze-configs:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: pip install requests pygithub
    
    - name: Run PR analyzer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - <<'EOF'
        import os
        from github import Github
        
        def main():
            g = Github(os.getenv('GITHUB_TOKEN'))
            repo = g.get_repo(os.getenv('GITHUB_REPOSITORY'))
            pr_number = int(os.getenv('GITHUB_REF').split('/')[2])
            pr = repo.get_pull(pr_number)
            
            print(f"Analyzing PR #{pr.number}: {pr.head.ref} â†’ {pr.base.ref}")
            
            for file in pr.get_files():
                if not any(file.filename.endswith(ext) for ext in ('.json', '.yaml', '.yml', '.ini','.txt')):
                    continue
                
                print(f"\nAnalyzing {file.filename}:")
                print(f"Status: {file.status}")
                print(f"Changes: +{file.additions}, -{file.deletions}")
                
                try:
                    base_content = repo.get_contents(file.filename, ref=pr.base.ref).decoded_content.decode()
                    head_content = repo.get_contents(file.filename, ref=pr.head.ref).decoded_content.decode()
                    
                    # Your custom analysis here
                    print("File contents available for comparison")
                    print(f"Base content length: {len(base_content)}")
                    print(f"Head content length: {len(head_content)}")
                    
                except Exception as e:
                    if "404" in str(e):
                        print("File not found in one branch (likely added/removed)")
                    else:
                        print(f"Error comparing: {str(e)}")

        if __name__ == "__main__":
            try:
                main()
            except Exception as e:
                print(f"Critical error: {str(e)}")
                raise
        EOF