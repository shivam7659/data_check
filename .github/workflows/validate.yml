name: PR Config Analyzer
on:
  pull_request:
    types: [opened, synchronize]  # Triggers when PR is created or updated

jobs:
  analyze-configs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for proper git diff
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: pip install requests
    
    - name: Run PR analyzer
      env:
        PR_URL: ${{ github.event.pull_request.html_url }}
      run: |
        python - <<'EOF'
        import os
        import re
        import requests
        from typing import Dict, List, Optional, Tuple

        def extract_repo_info(pr_url: str) -> Tuple[str, str, int]:
            """Extract owner, repo, and PR number from GitHub URL"""
            pattern = r"github\.com/([^/]+)/([^/]+)/pull/(\d+)"
            match = re.search(pattern, pr_url)
            if not match:
                raise ValueError("Invalid GitHub PR URL format")
            return match.group(1), match.group(2), int(match.group(3))

        def get_pr_changed_files(owner: str, repo: str, pr_number: int) -> List[Dict[str, str]]:
            """Get list of files changed in the PR"""
            url = f"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}/files"
            response = requests.get(
                url,
                headers={
                    "Accept": "application/vnd.github.v3+json",
                    "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"
                }
            )
            response.raise_for_status()
            return response.json()

        def get_file_contents(owner: str, repo: str, ref: str, file_path: str) -> Optional[str]:
            """Get content of a specific file"""
            url = f"https://api.github.com/repos/{owner}/{repo}/contents/{file_path}?ref={ref}"
            response = requests.get(
                url,
                headers={
                    "Accept": "application/vnd.github.v3.raw",
                    "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"
                }
            )
            if response.status_code == 404:
                return None
            response.raise_for_status()
            return response.text

        def analyze_pr(pr_url: str):
            """Main analysis function"""
            owner, repo, pr_number = extract_repo_info(pr_url)
            
            # Get PR details
            pr_details = requests.get(
                f"https://api.github.com/repos/{owner}/{repo}/pulls/{pr_number}",
                headers={
                    "Accept": "application/vnd.github.v3+json",
                    "Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"
                }
            ).json()
            
            base_ref = pr_details['base']['ref']
            head_ref = pr_details['head']['ref']
            
            # Get changed files
            changed_files = get_pr_changed_files(owner, repo, pr_number)
            
            # Analyze each changed file
            for file in changed_files:
                filename = file['filename']
                if not filename.endswith(('.json', '.yaml', '.yml', '.ini')):  # Filter config files
                    continue
                
                main_content = get_file_contents(owner, repo, base_ref, filename)
                pr_content = get_file_contents(owner, repo, head_ref, filename)
                
                # Your custom analysis here
                print(f"\nAnalyzing {filename}:")
                print(f"Main branch content:\n{main_content[:200]}..." if main_content else "File added in PR")
                print(f"PR branch content:\n{pr_content[:200]}..." if pr_content else "File removed in PR")

        if __name__ == "__main__":
            pr_url = os.getenv('PR_URL')
            print(f"Analyzing PR: {pr_url}")
            analyze_pr(pr_url)
        EOF